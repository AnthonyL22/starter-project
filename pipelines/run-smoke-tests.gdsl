#!groovy

DEFAULT_EMAIL = 'anthonyl22@gmail.com'
node {

    def BITBUCKET_CREDENTIALS_ID = 'sample'
    def BITBUCKET_SOURCE_PROJECT = 'ssh://sample.git'

    def mavenProfileToRun = 'smoke'
    def numberOfUsers = '5'
    def DEFAULT_BRANCH_NAME = 'origin/develop'
    def branchName
    boolean hasFailed = false

    def MAVEN_VERSION = 'Maven 3.3.9'
    def mvnHome = tool name: "${MAVEN_VERSION}", type: 'maven'
    def Test_Environment

    stage('Configuration?') {

        if (null == params.Test_Environment) {

            echo 'No Properties found from Upstream Job'
            Test_Environment = input(
                    [
                            message   : 'Environment Selection',
                            ok        : 'OK',
                            parameters: [
                                    choice(
                                            name: 'Test_Environment',
                                            choices: "stage\ndev\ntest\npreprod\nprod\n",
                                            description: 'Please select an environment'
                                    )
                            ]
                    ]
            )

            numberOfUsers = input(
                    [
                            message   : 'Number of Users',
                            ok        : 'OK',
                            parameters: [
                                    choice(
                                            name: 'numberOfUsers',
                                            choices: "${numberOfUsers}\n1\n3\n10\n15\n20\n",
                                            description: 'Please select number of users'
                                    )
                            ]
                    ]
            )

            stage('Checkout') {
                checkout([$class                           : 'GitSCM',
                          branches                         : [[name: "*/master"]],
                          doGenerateSubmoduleConfigurations: false,
                          extensions                       : [[$class: 'CleanCheckout']],
                          submoduleCfg                     : [],
                          userRemoteConfigs                : [[credentialsId: BITBUCKET_CREDENTIALS_ID, url: BITBUCKET_SOURCE_PROJECT]]
                ])
            }

            stage('Branch?') {

                try {

                    timeout(time: 1, unit: 'MINUTES') {

                        def branchNames = sh(
                                script: 'git branch -r',
                                returnStdout: true
                        ).trim()

                        branchName = input(
                                [
                                        message   : 'Branch',
                                        ok        : 'OK',
                                        parameters: [
                                                choice(
                                                        name: 'branchName',
                                                        choices: "${branchNames}",
                                                        description: 'Please select a branch'
                                                )
                                        ]
                                ]
                        )
                        branchName.trim()
                    }

                    if (branchName == 'none') {
                        error("Invalid selection(s)")
                    }

                } catch (err) {
                    echo "------------------------------------------------------"
                    echo "No User response, switching to default branch '${DEFAULT_BRANCH_NAME}'"
                    echo "------------------------------------------------------"
                }

            }

        } else {
            if ("${params.Test_Environment}".contains('test') || "${params.Test_Environment}".contains('qa')) {
                Test_Environment = 'test'
            } else if ("${params.Test_Environment}".contains('stage')) {
                Test_Environment = 'stage'
            } else if ("${params.Test_Environment}".contains('prod')) {
                Test_Environment = 'prod'
            } else {
                Test_Environment = "${params.Test_Environment}"
            }

            branchName = DEFAULT_BRANCH_NAME
        }

        echo "Current test.env=${Test_Environment} Selected"
        mavenProfileToRun = "${mavenProfileToRun}-${brand}"

    }

    stage('Verify') {
        parallel(
                "Branch Name": {
                    echo "Selected Branch Name '${branchName}'"
                },
                "Environment": {
                    echo "Testing '${Test_Environment}' Environment"
                },
                "Maven Profile?": {
                    echo "Running Maven Profile '${mavenProfileToRun}' "
                }
        )
    }

    stage('Checkout') {
        checkout([$class                           : 'GitSCM',
                  branches                         : [[name: "${branchName}"]],
                  doGenerateSubmoduleConfigurations: false,
                  extensions                       : [[$class: 'CleanCheckout']],
                  submoduleCfg                     : [],
                  userRemoteConfigs                : [[credentialsId: BITBUCKET_CREDENTIALS_ID, url: BITBUCKET_SOURCE_PROJECT]]
        ])
    }

    stage('Smoke Tests') {
        currentBuild.result = 'SUCCESS'
        try {
            timeout(time: 30, unit: 'MINUTES') {
                int result = sh script: "'${mvnHome}/bin/mvn' install -P${mavenProfileToRun} -Dtest.env=${Test_Environment} -Dbrand=${brand} -Drunners=${numberOfUsers} -U failsafe:verify -f pom.xml", returnStatus: true
                if (result > 0) {
                    hasFailed = true
                    echo "Test failures"
                }
            }
        } catch (err) {
            hasFailed = true
            echo 'Test Execution Timed Out'
        }
    }

    if (hasFailed) {
        currentBuild.result = 'SUCCESS'
        stage('Rerun Failed') {
            def fileToFind = "${WORKSPACE}/target/failsafe-reports/testng-failed.xml"
            exists = fileExists fileToFind
            if (exists) {
                try {
                    timeout(time: 30, unit: 'MINUTES') {
                        int result = sh script: "'${mvnHome}/bin/mvn' install -Prerun-failed -Dtest.env=${Test_Environment} -Dbrand=${brand} -Drunners=${numberOfUsers} -Dfindbugs.skip=true failsafe:verify -f pom.xml", returnStatus: true
                        if (result > 0) {
                            currentBuild.result = 'FAILURE'
                            echo "Rerun Test failures"
                        }
                    }
                } catch (err) {
                    currentBuild.result = 'UNSTABLE'
                    echo 'Test Execution Timed Out'
                }
            }
        }
    }

    stage("Publish Reports") {
        parallel(
                "Allure": {
                    allure includeProperties: false,
                            results: [[path: 'target/allure-results']]
                },
                "TestNG": {
                    publishHTML(
                            [allowMissing         : true,
                             alwaysLinkToLastBuild: true,
                             keepAll              : false,
                             reportDir            : '**/target/failsafe-reports/**/testng-results.xml',
                             reportFiles          : 'index.html',
                             reportName           : 'Automation Report',
                             reportTitles         : 'Automation Report'])
                },
                "Junit": {
                    step([$class: 'JUnitResultArchiver', testResults: '**/target/surefire-reports/*.xml', healthScaleFactor: 1.0])
                },
                "Email": {
                    if (currentBuild.result != 'SUCCESS') {
                        sendEmailNotification(branchName, Test_Environment, brand, currentBuild.result)
                    }
                }
        )
    }

    stage('Sonar') {

        try {
            withSonarQubeEnv('sonarqube') {
                sh script: "'${mvnHome}/bin/mvn' sonar:sonar -Dsonar.branch.name=develop -f pom.xml"
            }
        } catch (Exception e) {
            println "Temporarily ignoring an error while invoking Sonar logic: ${e.message}"
        }
    }

    build job: 'downstream-job-name',
            propagate: false,
            wait: false,
            parameters: [string(name: 'Test_Environment', value: String.valueOf(Test_Environment)),
                         string(name: 'brand', value: String.valueOf(brand)),
                         string(name: 'branchName', value: String.valueOf(branchName))]

}

/**
 * Send an email based on runtime settings.
 *
 * @param testEnvironment test environment used
 * @param branch branch selected
 * @param brand brand to be tested
 * @param currentResult current test build result
 */
private void sendEmailNotification(branchName, testEnvironment, brand, currentResult) {

    def subject = "${currentResult} :: Smoke Tests"
    def body = getBody(currentResult, branchName, testEnvironment, brand, BUILD_NUMBER, BUILD_TIMESTAMP, env.BUILD_URL)
    emailext(
            attachLog: false,
            subject: subject,
            body: body,
            attachmentsPattern: '**/target/failsafe-reports/emailable-report.html',
            to: DEFAULT_EMAIL,
            mimeType: 'text/html',
            replyTo: env.DEFAULT_REPLYTO
    )
}

/**
 *
 *  Create beautified HTML based report
 *
 * @param result current build result
 * @param branch branch selected
 * @param testEnvironment test environment used
 * @param brand brand tested
 * @param buildNumber jenkins build number
 * @param buildTime build timestamp
 * @param buildUrl build url
 * @return HTML report
 */
static String getBody(result, branch, testEnvironment, brand, buildNumber, buildTime, buildUrl) {

    String emailBody = "<!DOCTYPE html><html lang='en'>" +
            "<head><meta charset='UTF-8'><style>table {margin-bottom: 40px;}table thead th {padding-right:60px; white-space: nowrap;} table tbody td.content {vertical-align:top;}</style></head>" +
            "<body><table><thead>" +
            "<th>Result</th><th>Branch</th><th>Environment</th><th>Brand</th><th>Build #</th><th>Build Time</th>" +
            "</thead><tbody><tr>" +
            "<td class='content'><a href='${buildUrl}allure' target='_blank'>${result}</a></td>" +
            "<td class='content'>${branch}</td>" +
            "<td class='content'>${testEnvironment}</td>" +
            "<td class='content'>${brand}</td>" +
            "<td class='content'><a href='${buildUrl}console' target='_blank'>${buildNumber}</a></td>" +
            "<td class='content'>${buildTime}</td>" +
            "</tr></tbody></table></body></html>"
    return emailBody
}
